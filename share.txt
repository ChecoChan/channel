public static synchronized <K, V> GuavaCacheUtil<K, V> getOrCreate(
            String name,
            long maxSize,
            long expireAfterSec,
            Function<K, V> valueLoader
    ) {
        return (GuavaCacheUtil<K, V>) CACHE_REGISTRY.computeIfAbsent(name, key -> {
            CacheBuilder<Object, Object> cacheBuilder = CacheBuilder.newBuilder()
                    .maximumSize(maxSize)
                    .expireAfterWrite(expireAfterSec, TimeUnit.SECONDS);
            return new GuavaCacheUtil<>(cacheBuilder, valueLoader);
        });
    }

    /**
     * ✅ 根据名字创建或获取全局共享缓存（无 loader，适合手动 put）
     */
    public static synchronized <K, V> GuavaCacheUtil<K, V> getOrCreate(String name) {
        return (GuavaCacheUtil<K, V>) CACHE_REGISTRY.computeIfAbsent(name, key -> {
            CacheBuilder<Object, Object> cacheBuilder = CacheBuilder.newBuilder();
            return new GuavaCacheUtil<>(cacheBuilder);
        });
    }